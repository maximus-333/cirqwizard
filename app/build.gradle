/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'java'
    id 'edu.sc.seis.launch4j' version '3.0.6'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    //test - likely need fat jar for launch4j
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    mavenLocal()
    maven {
        url "https://www.sparetimelabs.com/maven2/"
    }
    maven {
        url "https://maven.openimaj.org"
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    implementation 'org.bytedeco:javacv:1.5.11'
    implementation 'org.bytedeco:opencv:4.10.0-1.5.11'
    implementation 'org.openimaj:core-video-capture:1.3.10'
    //implementation 'org.scream3r:jssc:2.8.0'          //There's an error with it, people replace
    implementation 'io.github.java-native:jssc:2.9.6'   //this is replacement
    implementation 'org.simpleframework:simple-xml:2.7.1'
    testImplementation 'junit:junit:4.13.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = '8.8'
}

task updateVersionFile() {
    doLast() {
        File versionFile = file("src/main/resources/version.number")
        versionFile.text = releaseVersion
    }
}
compileJava.dependsOn = ['updateVersionFile']

//Test - compile for older Java (Gradle blog java toolchains from v6.7)
//I think this is most reliable variant. 
//This works, without it had error on .EXE launch
compileJava {
    options.release = 8
}

javafx {
    version = "21"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

//This replaced mainClassName property
application {
    mainClass = 'org.cirqwizard.fx.MainApplication'
}

def depsDir = file("build/package/libs")
jar {
    actions = []
    archiveBaseName = 'cirqwizard'
    archiveVersion = releaseVersion

    doLast {
        depsDir.delete()
        depsDir.mkdirs()

        copy() {
            from configurations.runtimeClasspath
            into 'build/package/libs'
        }
    }
}

shadowJar {
    archiveBaseName = 'cirqwizard'
    archiveVersion = releaseVersion
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

launch4j {
    icon = '../resources/main/package/windows/cirQWizard.ico'
    outfile = "cirqwizard.exe"
    bundledJrePath = 'jre'
    version = releaseVersion
    textVersion = releaseVersion
    fileDescription = 'cirQWizard'
    productName = 'cirQWizard'

    jarTask = project.tasks.shadowJar
    requires64Bit = false
    jreMinVersion = JavaLanguageVersion.of(compileJava.options.release.get()).toString()
    copyright = "GPL 3.0"
}

task printNsisVersion() {
    ext.versionFile = file('build/tmp/version.nsh')
    doLast {
        versionFile.text = '!define VERSION ' + releaseVersion
    }
}

task assembleNsis(type: Exec, dependsOn: ['launch4j', 'printNsisVersion']) {
    commandLine 'C:\\Program files (x86)\\NSIS\\makensis.exe', 'Windows.nsi'
}
